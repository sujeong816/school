Chap 06
1. 프로세스 목록 확인 : ps
-e : 시스템에서 실행 중인 모든 프로세스 정보 출력
-f : 프로세스에 대한 자세한 정보 출력 (PPID 확인)
-u uid : 특정 사용자에 대한 모든 프로세스의 정보 출력 (ps -u han : 사용자 han 정보 출력)
-p pid : pid로 지정한 특정 프로세스의 정보 출력
a : 터미널에서 실행시킨 프로세스 정보 출력
u : 프로세스 소유자 이름, CPU 사용량, 메모리 사용량 등 상세 정보 출력
x : 시스템에서 실행 중인 모든 프로세스 정보 출력
--pid PID 목록 : 목록으로 지정한 특정 PID 정보 출력

1-1) ps -f 실행 시 부모 자식 관계
user1 15761 15721 vi
user1 15721 15710 sh
user1 15710 15701 -bash
-> vi의 부모가 sh, sh의 부모가 -bash

1-2) guest 사용자가 실행한 프로세스 모두 찾기
ps -u guest, ps -uf guest


2. 특정 프로세스 정보 검색 : pgrep
-x : 패턴과 정확히 일치하는 프로세스 정보 출력 (pgrep -x bash : bash를 실행하는 프로세스 PID)
-n : 패턴을 포함하고 있는 가장 최근 프로세스 정보 출력
-u 사용자 이름 : 특정 사용자에 대한 모든 프로세스 출력(여러 사용자가 동시에 bash 사용 중일 때 용이)
-l : PID와 프로세스 이름 출력 (pgrep -l bash : bash를 실행하는 PID와 이름-bash 출력)
-t term : 특정 단말기와 관련된 프로세스 정보 출력


3. 프로세스 종료 : kill
-2 : 인터럽트 시그널 (ctrl+c)
-9 : 프로세스 강제 종료
-15 : 프로세스와 관련된 파일 정리 후 종료. 프로세스가 종료되지 않을 수도...

-pkill man : man 이름을 가진 프로세스 모두 종료

3-1) PID 5000 프로세스 강제 종료 : kill -9 5000

3-2) kill보다 pkill 명령이 더 편한 경우 : 같은 명령이 여러 개 검색 되는 경우


4. 프로세스 관리 도구
- top : 현재 실행 중인 프로세스 정보 주기적으로 출력 (PID, USER, PR, NI  등)

4-1) top 명령으로 주기적으로 프로세스 상태 점검


5. 포그라운드 작업 : sleep 시간 (fg %2 : 2번 작업 포그라운드 전환)
5-1) $ jobs
[1] + 실행 중 sleep 100  포그라운드로 전환
-> fg %1 or fg


6. 백그라운드 작업 : 명령어 뒤에 & (bg %2 : 2번 작업 백그라운드로 전환)
6-1) $ find / -name test 백그라운드로 전환
find / -name test -> jobs(작업 번호 알아내기) -> ctrl+z(일시정지) -> bg %작업번호


7. 작업 목록 보기 : jobs
%번호 : 해당 번호의 작업 정보 출력
%+ or %% : 작업 순서가 +인 작업 정보 출력
%- : 작업 순서가 -인 작업 정보 출력


8. 작업 종료하기 : ctrl + c
포그라운드 작업은 대부분 종료됨
백그라운드 작업은 kill %작업번호 or kill pid

8-1) 백그라운드 작업 중 3번 작업 종료하기
[1] + 실행 중 sleep 100
[2] - 실행 중 find / -name test
[3] 실행 중 sleep 300

-> kill %3


9. 로그아웃 후에도 백그라운드 작업 계속 실행 : nohup 명령&
반드시 백그라운드에서 실행하기. 아니면 명령 실행 결과랑 오류메시지가 디렉터리에 nohup.out 파일로 자동 저장됨


10. 작업 예약
1) 정해진 시간에 한 번 실행 : at
at 설치 : sudo apt install at
-l : 현재 실행 대기 중인 명령의 전체 목록 출력(== atq)
-r 작업 번호 : 현재 실행 대기 중인 명령 중 해당 작업 번호 삭제(== atrm)
-m : 출력 결과가 없더라도 작업 완료 시 사용자에게 메일 알림
-f 파일 : 표준 입력 대신 실행할 명령을 파일로 지정

1-1) /etc/at.allow, /etc/at.deny에서 at 명령 사용 제한 가능
* allow 파일이 있으면 해당 파일 지정 사용자만 at 명령 사용 가능. deny 무시
* allow 없으면 deny 지정 사용자 제외 모두 at 사용 가능
* 둘 다 없으면 root만 at 사용 가능
* 둘 다 있으면 사용자 at 사용 가능(allow 적용)
* deny 비어있으면 모든 사용자 at 사용 가능

2) 정해진 시간에 반복 실행 : crontab
-e : 사용자의 crontab 파일 편집
-l : crontab 파일 목록 출력
-r : corntab 파일 삭제

2-1) crontab 파일 형식
분 시 일 월 요일 작업 내용~~~~
12월 30일 14시 30분에 작업~~~ : 30 14 30 12 * 작업 내용~~~~

2-2) /etc/cron.allow, /etc/cron.deny로 crontab 명령 사용 제한 가능
* allow 파일 있으면 파일 지정 사용자만 명령 사용 가능
* deny만 있으면 이 파일에 사용자 계정 없어야 명령 사용 가능
* 둘 다 없으면 시스템 설정 따라 달라짐
* 둘 다 있으면 allow 적용


문제
1. 12월 31일 낮 12시에 user01 사용자가 실행하고 있는 프로세스 목록을 확인하도록 설정하는 과정
at 12:00 pm December 31
at> ps –u user01
at> <EOT> (ctrl + d)

2. 매주 일요일 밤 12시에 user01 사용자가 실행하고 있는 프로세스 목록을 확인하여 user01 사용자의 홈 디렉터리에 ps.out 파일로 저장
0 12 * * 0
/usr/bin/ps –u user01 > ~user01/ps.out


Chap 07
1. 마운트 관련 명령 - 장치와 디렉터리 연결하기
1) 파일 시스템 마운트 : mount
-t 파일 시스템 종류 : 파일 시스템 종류 지정
-o 마운트 옵션 : 마운트 옵션 지정
-f : 마운트 가능 점검
-r : 읽기 가능하게 마운트(== -o ro) 

1-1) 윈도우용 USB 메모리 연결 : mount -t vfat /dev/sdc1 /mnt
1-2) 리눅스용 USB 메모리 연결 : mount /dev/sdc1 /mnt
1-3) CD-ROM /cdrom 디렉터리에 마운트 : mount -t iso9660/dev/derom/mnt/derom

2) 파일 시스템 언마운트 : umount
-t 파일 시스템 종류 : 파일 시스템 종류 지정


2. 디스크를 파티션으로 나누는 명령 : fdisk
-b 크기 : 섹터 크기 지정. 512, 1024, 2048, 4096
-l : 파티션 테이블을 출력한다 (정보 보기)


3. 파일 시스템 생성
1) 리눅스 파일 시스템 생성 : mkfs
-t 종류 : 파일 시스템 종류 지정(디폴트 ext2)

2) 리눅스 개정판 확장 파일 시스템(ext2,3,4) 생성 : mke2fs
-t 종류 : 파일 시스템 종류 지정
-b 블록 크기 : 블록 크기 지정 
-c : 배드 블록 체크
-f 프래그먼트 크기 : 프래그먼트 크기를 바이트 수로 지정
-i inode당 바이트 수 : inode당 바이트 수 지정(디폴트 4096B)
-m 예약 블록 퍼센트 : 슈퍼유저에게 예약해둘 블록 퍼센트 지정(5%)


4. 파일 시스템별 디스크 사용량 확인 : df
-디스크의 남은 공간에 대한 정보 출력. disk free
-h : 알기 쉬운 단위로 사용량 출력
-t 파일 시스템 종류 : 지정한 파일 시스템 종류에 해당하는 디스크 사용량 출력
-T : 파일 시스템 종류 출력

5. 디렉터리나 사용자별 디스크 사용량 확인 : du
-"디렉터리 별로" 디스크 사용 공간에 대한 정보 출력. disk usage
-s : 특정 디렉터리의 전체 사용량 출력
-h : 디스크 사용량을 알기 쉬운 단위로 출력

5-1) guest 계정 디스크 사용량 확인 : du -s ~guest

6. 파일 시스템 검사 : fsck
-file system check
-f : 강제 점검
-b 슈퍼블록 : 슈퍼블록으로 지정한 백업 슈퍼블록 사용
-y : 모든 질문에 yes로 대답하게 함
-a : 파일 시스템 검사에서 문제를 발견했을 때 자동 복구

7. 검사하는데 필요시 복구 작업 : e2fsck
-사용 시 마운트 해제해야 함
-리눅스 확장 파일 시스템 점검
-f : 강제 점검
-b 슈퍼블록 : 슈퍼블록으로 지정한 백업 슈퍼블록 사용
-y : 모든 질문에 yes로 대답하게 함
-j ext3/ext4 : ext3나 ext4 파일 시스템 검사 시 지정

8. 배드 블록 검사 : badblocks
-배드 블록으로 인한 데이터 유실을 막기 위해 주기적으로 검사
-v : 검색 결과 자세히 출력
-o 출력 파일 : 검색한 배드 블록 목록을 지정한 출력 파일에 저장

9. 백업 슈퍼블록 위치 파악 : dumpe2fs [장치명]


Chap 08
1. systemd 서비스 제어 : systemctl 옵션 명령 유닛명
그냥 : 동작중인 유닛 출력
-a : 상태 관계없이 유닛 전체 출력
-t 유닛 종류 : 지정한 종류의 유닛만 출력

2. 현재 target 확인 : systemctl get-default
2-1) device 유닛에 뭐 있는지 확인 : systemctl -t device
2-2) atd.service 유닛이 동작 중인지 확인 : systemctl status atd.service
2-3) 위에꺼 유닛 시작 : systemctl start atd.service

3. 단일 사용자 모드로 전환
systemctl isolate rescue.target(런레벨1)
systemctl isolate runlevel1.target
init 1

4. 리눅스 종료 : shutdown (halt나 poweroff 명령 사용할 수도...)
-k : 사용자에게 종료 메시지 전달
-r : 종료 후 재시작
-h : 종료 후 halt 상태 이동
-f : 빠른 재시작
-c : 이전에 쓴 shutdown 취소

4-1) 시스템 즉시 종료 : shutdown -h now
4-2) 셧다운 안내 메시지 전달 2분 후 종료 : shutdown -h +2 "메시지"
4-3) 3분 후 시스템 재시작 : shutdown -r +3
