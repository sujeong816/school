Chap 06
1. 부모 자식 관계
부모 프로세스 ----- 생성 -----> 자식 프로세스
             <--종료 및 복귀 --   

2. PID (Process Identification Number)
1번 프로세스는 나머지 모든 시스템 프로세스의 부모 프로세스, 2번 프로세스는 모든 스레드의 부모 프로세스가 됨

3. 프로세스의 종류
-데몬 프로세스 : 특정 서비스를 제공하기 위해 존재. 리눅스 커널에 의해 실행. 
평소 대기 상태로 있다가 서비스 요청이 들어오면 서비스 제공

-고아 프로세스 : 자식 프로세스가 아직 실행 중인데 부모 프로세스가 먼저 종료되어 돌아갈 곳이 없는 자식 프로세스
1번 프로세스가 해당 프로세스의 새로운 부모 프로세스가 되어 고아가 작업 종료 가능하게 함

-좀비 프로세스 : 자식이 실행을 종료했는데 프로세스 테이블 목록에 남이있는 경우
프로세스 목록에 defunct 프로세스로 뜨기도 함
실제 실행되지는 않지만 동작 중인 프로세스 테이블 목록을 차지하여 좀비가 많아지면 용량이 부족해짐. 
kill 명령으로 제거 불가능 -> SIGCHLD 시그널을 부모에게 보내 부모가 자식을 정리하게 하거나 부모 자체를 종료(이러면 고아)


Chap 07
0. 마운트 포인트 : 디렉터리 계층 구조에서 파일 시스템이 연결되는 디렉터리

1. 리눅스용 USB 연결
(메모리 꽂기 -> fdisk -l 로 메모리 장치명 확인하기 ->) 
메모리에 파티션 생성 
-> 파티션 포맷
-> 파일 시스템 생성 
-> usb 파일 시스템 마운트
-> 디렉터리 사용 (-> umount로 연결해제)

2. 윈도용 usb 메모리 연결
(메모리 꽂기 -> 장치명 확인 ->)
메모리 마운트
-> 파일 시스템 종류 따라 vfat or ntfs 결정
-> 연결

2-1) 윈도우 usb 파일 리눅스 시스템에 복사하기
꽂기 -> 장치명 확인
파티션 생성 fdisk /dev/sdb
파티션 포맷 및 파일 시스템 생성 mke2fs -t ext /dev/sdb1
usb 메모리에 마운트 mount /dev/sdb1 /mnt
연결 해제 umount /mnt

3. 디스크 장치의 이름과 파티션 표시
- /dev/sd(알파벳)
예를 들어, 첫 번째 디스크는 /dev/sda

4. LVM(Logical Volume Manager)
-디스크 용량이 부족할 때 디스크 여러 개를 하나의 디스크처럼 사용 가능함 
    -> 시스템 성능 향상, 데이터 관리 용이, 파일 복구 유리
-파티션을 효율적으로 사용하게 함

4-1) 디스크 장치 /dev/sde에서 LVM 사용하기
파티션 나누기 fdisk
새 파티션 생성 n
기본 or 확장 파티션 p
파티션 번호 입력 Partition number: 1
크기 및 시작, 마지막 섹터 정하기
파티션 정보 확인 p
설정 정보 디스크에 기록 w fdisk 종료

5. 디스크 기반 파일 시스템과 디스크에서 생성, 가상 파일 시스템은 메모리에서 생성됨

6. 파일 시스템은 inode로 관리되며, 디렉터리는 파일의 목록을 가지고 있는 파일임. 특수 파일을 통해 장치 접근 가능

7. 블록 그룹 0 외 일부 그룹에 슈퍼블록이 있는 이유
-슈퍼블록에 문제가 생기면 전체 파일 시스템을 사용하지 못하므로 슈퍼블록을 다른 블록 그룹에 복사해놓음. 이후 블록 그룹 0의 슈퍼블록을 읽을 수 없는 경우 복사본을 사용하여 복구

8. inode의 직접 블록은 데이터 블록에 대한 주소를 가지고 있고, 간접 블록은 주소를 가지고 있는 블록의 주소를 저장함


Chap 08
1. 리눅스 부팅 과정
바이오스 -> 부트 로더 -> 커널 초기화 -> systemd 서비스 -> 로그인 프롬프트 출력

2. systemd : 리눅스의 시스템, 서비스 관리자. 유닉스 init 프로세스의 작업을 대신 수행.
-다양한 서비스 데몬 시작 / 프로세스 상태 유지 / 시스템 상태 관리

3. init 런레벨
-0 : 시스템 종료
-1, S, s : 응급 복구 모드(단일 사용자 모드)
-2, 3, 4 : 다중 사용자 모드
-5 : 그래피컬 다중 사용자 모드
-6 : 재시작

4. 슈퍼데몬 : 사용자가 네트워크 서비스를 요청하면 슈퍼데몬이 해당하는 서비스 데몬을 동작시킴

5. 독자형 데몬 : 스스로 동작함. 시스템 백그라운드에서 항상 도작하므로 자주 호출되지 않으면 자원 낭비 됨. 그래도 슈퍼데몬 호출보다는 시간이 빠름

6. 부트로더  : 리눅스 커널을 메모리에 로딩하는 역할
-부팅 과정에서 부트 스플래시 출력 도중 부팅 메시지 확인 : alt+d

6-1) GRUB
-LILO와 달리 윈도우에서도 사용 가능
-LILO보다 설정과 사용 편리
-부팅 시 명령 사용하여 수정 가능
-멀티 부팅 기능 지원
-최신 버전 GRUB2

7. 계정 암호 잊어버렸을 때 : 단일 사용자 모드로 재부팅 시켜 암호 재설정


Chap 09
1. 스냅 : 샌드박스 형태의 패키지.
-우분투가 새로 도입한 패키지 형식
-패키지를 만들 때 프로그램이 사용하는 모든 라이브러리를 패키지 안에 포함
-개발자가 다른 패키지나 라이브러리와의 의존성 신경 x
-기존 시스템과 격리되어 실행하므로 보안 강화
-용량이 커짐


Chap 10
1. UID : 사용자 ID 번호
-시스템이 사용자를 구별하기 위해 사용함
-임의 수정x, 일반 사용자는 1000번부터 할당

0: root 사용자 계정
1: 시스템 데몬 계정
2: 명령어 관리를 위한 계정
7: 프린트 서비스와 관련된 계정
65534: 사용자의 UID로 NFS와 관련된 계정


2. 파일

2-1) 사용자 계정과 관련된 파일 중 암호는 해킹 시도로부터 보안을 유지하기 위해 /etc/shadow 파일에 저장함
-암호의 유효기간 정보 -> 패스워드 에이징 정보도 해당 파일에 저장됨

2-2) 사용자 계정 설정과 관련된 기본값은 /etc/login.defs 파일에 정의됨

2-3) /etc/group : 그룹 GID 저장

2-4) /etc/passwd : 사용자의 기본 그룹 저장

2-5) /etc/skel : 사용자 계정 설정 시 공통 배포 파일 지정

2-6) /etc/sudoers : sudo 명령으로 userdel 사용 가능하게 지정


3. UID와 EUID
-UID : 사용자가 로그인할 때 사용한 계정 번호
-EUID : 현재 명령을 수행하는 주체의 번호

*만약 1000번으로 로그인하고, su 명령을 사용하여 1001로 변환 시, UID는 1000. EUID는 1001이다.



Chap 11
1. 프로토콜 : 컴퓨터와 컴퓨터 사이에서 데이터를 어떻게 주고받을 것인지를 정의한 통신 규약
-같은 프로토콜을 사용하는 기기 간에만 통신 가능

2. MAC 주소와 IP 주소
-MAC : 네트워크 랜에 저장된 주소. 수정 안 됨. 16진수 6개로 구성된 48비트
-IP : 인터넷으로 연결된 네트워크에서 각 기기들을 구분하기 위해 사용. 1바이트짜리 4자리 숫자로 구성. 4바이트

3. 포트번호 : 서비스를 구분하는 번호
-TCP/IP 프로토콜의 4계층인 전송 계층에서 사용
-사용자가 보낸 패킷이 정확하게 전달되려면 필요

4. 네트워크 설정 시 IP, 넷마스크와 브로드캐스트 주소, 라우터 주소, DNS 주소가 필요함

5. ping 때렸는데 응답 없음 -> 해당 호스트가 네트워크 연결이 안 되어있음 or 보안을 위해 ping 때려도 응답 안 하게 설정