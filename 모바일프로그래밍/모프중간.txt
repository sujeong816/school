Chap 01
1. 안드로이드 버전 흐름
컵케이크(1.5) -> 도넛(1.6) -> 이클레어(2.1) -> 프로요(2.2) -> 진저브레드(2.3) -> 허니콤(3.x) -> 아이스크림 샌드위치(4.0.x) -> 젤리빈(4.1, 4.2, 4.3) -> 킷캣(4.4) -> 롤리팝(5.0, 5.1) -> 마시멜로(6.0) -> 누가(7.0, 7.1) -> 오레오(8.0, 8.1) -> 파이(9.0) -> Q(10.0)
우리가 쓰는 수업에서 쓰는 거 Q

2. 아이스크림 샌드위치는 태블릿 전용인 허니콤과 스마트폰 전용인 진저브레드를 통합한 것이다 즉 태블릿과 스마트폰에서 공통된 개발 환경을 사용할 수 있다. 킷캣부터는 웨어러블 장비를 개발할 수 있게 되었고, 롤리팝은 모든 안드로이드 기기를 통합 개발할 수 있는 SDK를 제공했다. 마시멜로는 지문 인식 등의 보안이 강화되었고, 누가는 가상현실 및 3D 게임, 멀티태스킹 기능이 강화되었다. 오레오는 설정 화면, PIP, 림 등이, 파이는 실내 위치 추적, 향상된 알림, 노치 지원, 인공지능 등이 추가 및 개선되었으며, Android 10.0은 라이브 캡션, 스마트 재생, 청각 보조, 동작 내비게이션, 어두운 테마, 개인 정보 제어, 위치 제어, 보안 업데이트, 포커스 모드, 패밀리 링크 등이 추가 및 개선되었다.

3. 안드로이드의 주요 기능
-애플리케이션 프레임워크를 통한 코드의 재사용
-달빅 또는 아트 런타임 제공
-2D, 3D 그래픽 최적화
-SQLite 제공
-각종 오디오, 비디오, 이미지 형식 지원
-다양한 하드웨어 지원
-Eclipse, Android Studio 개발 환경 제공

4. 안드로이드 운영체제 구조
-응용 프로그램
-응용 프로그램 프레임워크
-안드로이드 런타임
-라이브러리
-리눅스 커널

5. 안드로이드 개발 환경
1)JDK <-> 3)Android Studio - 4)ADT  <- 5) -> 2)안드로이드 SDK - 추가 API 다운로드
              |         |
    a)코딩 및 수정     b)화면 출력  -> 6) AVD 생성
            |                             |
    c)결과 확인 <--------------------------

6. 개발 환경의 버전
-Java 8(Open JDK 1.8)
-Android SDK Tools 29
-Android Studio 3.5.1
-Android 10.0(API 29)

7. 실습하기 적당한 AVD는 xxhdpi(1080*1920) 해상도이며, 화면이 5.5인치 이상인 안드로이드 스마트폰은 다양한 고해상도를 지원한다.


Chap 02
1. 안드로이드 프로젝트 개발 단계
안드로이드 프로젝트 생성 - 화면 디자인 및 편집 - Kotlin 코드 작성 및 수정 - 프로젝트 실행 및 결과 확인 - 안드로이드 애플리케이션 개발 완료

2. 안드로이드 프로젝트를 새로 만들 때는 애플리케이션 이름, 패키지 이름, 최하 실행 버전을 필수로 입력 또는 선택해야 한다.

3. 안드로이드 프로젝트에서 프로그래머가 주로 변경하거나 접근할 폴더, 파일
- activity_main.xml: 기본 액티비티
- MainActivity.kt: 메인 코틀린 코드
- strings.xml: 문자열이 저장된 파일
- drawable: 앱에서 사용할 이미지 파일을 저장하는 폴더
- AndroidManifest.xml: 앱의 기본적인 정보가 설정된 파일

4. 액티비티를 구성하는 방법으로는 [Design]에서 마우스로 직접 끌어다 사용하거나, activity_main.xml 파일을 코드로 입력/수정하는 방법이 있는데, 코드를 사용하는 것이 일반적이다.

5. 안드로이드 스튜디오에서 이클립스용 프로젝트를 열려면 File - New - Import Project 선택 후 이클립스용 프로젝트 폴더를 선택한다.

6. 안드로이드 스튜디오에서 프로젝트를 다른 사람에게 전달하려면 프로젝트 폴더를 통째로 주거나 압축해서 전달한다.

7. activity_main.xml에서 버튼 태그는 <Button></Button> 또는 <Button /> 형식 사용

8. activity_main.xml의 네임스페이스는 디폴트로 android가 지정되어 있다. 그러므로 속성은 'android:속성 이름' 형식을 사용한다.

9. activity_main.xml에서 위젯에 아이디를 지정하려면 "@+id/아이디" 형식을 사용한다.

10. 코틀린 코드에서 ctrl+alt+o는 임포트된 내용을 자동으로 정리해주며, alt+enter는 클래스나 인터페이스를 자동으로 임포트해준다.

11. ctrl+alt+l 소스코드 정렬

12. Button 클릭 시 작동하는 표준 코드
lateinit var button1 : Button
button1 = findViewById<Button>(R.id.button1)
button1.setOnClickListener {
    //버튼 클릭 시 작동할 코드
}


Chap 03
1. 코틀린은 객체지향 프로그래밍을 지언하며 주요 특징은 다음과 같다.
-Java와 100% 상호 호환되므로 Java 코드를 완전히 대체할 수 있다.
-Java보다 문법이 간결하다.
-프로그램의 안정성을 높여준다.
-var 또는 val 예약어를 통해 데이터 형식을 선언하지 않고 변수를 선언할 수도 있다.

2. 코틀린에서 많이 사용되는 기본적인 데이터 형식은 Char, String, Byte, Short, Int, Long, Float, Double, Boolean 등이다.

3. if문은 조건이 true인지 false인지에 따라서 어떤 작업을 할 것인지를 결정하고, when문은 여러 가지 경우에 따라서 어떤 작업을 할 것인지를 결정한다.

4. 일차원 배열을 선언하고 값을 대입하는 방법
var one = Array<Int>(4, {0})
one[0] = 10
one[3] = 20

5. for문은 2가지 방법
for (변수 in 시작..끝 step 증가량){
    //이 부분을 반복 실행
}

for (변수 in 배열명.indices) {
    //이 부분을 반복 실행
}

6. 변수에는 전역변수와 지역변수가 있다. 전역변수는 모든 메소드에서 사용되고 지역변수는 메소드 내부에서만 사용된다.

7. 클래스는 어떤 기능을 하도록 하기 위해 생성하는데, 객체지향 관점에서는 클래스를 실세계의 객체가 가질 수 있는 상태와 행동으로 정의한다.

8. 생성자는 클래스의 이름과 동일하고 하고, 메소드의 데이터 형식은 생략한다.

9. 메소드 오버로딩은 한 클래스 내에서 메소드의 이름이 같아도 파라미터의 개수나 데이터 형식만 다르면 여러 개를 선언할 수 있음을 의미한다.

10. 정적 구성 요소에는 정적 필드, 정적 메소드, 상수 필드가 있으며, 모두 companion object {} 안에 필드를 작성한다.

11. 클래스 상속은 기존의 클래스가 가지고 있는 것을 그대로 물려받으면서 필요한 필드나 메소드를 추가로 정의하는 것을 의미한다.

12. 추상 클래스는 인스턴스화를 금지하는 클래스를 말하며, 클래스 앞에 abstract 키워드를 붙여서 지정한다.

13. 추상 클래스와 추상 메소드를 사용하는 목적은 공통적으로 사용되는 기능을 추상 메소드로 선언해놓고, 추상 클래스를 상속받은 후에 반드시 추상 메소드를 오버라이딩해서 사용하기 위함이다.

14. 다형성은 서브클래스에서 생성한 인스턴스를 자신의 클래스 변수에 대입할 수 있는 것을 말한다.

15. 인터페이스는 추상 클래스와 성격이 비슷하다. 인터페이스는 class 키워드 대신 interface 키워드를 사용하여 정의하고, 내부에는 추상 메소드를 선언한다.

16. 람다식은 함수를 익명 함수 형태로 간단히 표현한 것이다. 람다식을 사용하면 코드가 간결해져서 가독성이 좋아진다.

17. 클래스와 인터페이스가 많아지면 관리하기가 어렵기 때문에 패키지 단위로 묶어서 관리한다.

18. 제네릭스는 데이터 형식의 안전성을 보장하는 데 사용한다.


Chap 04
1. 위젯은 넓은 의미로 View 클래스 하위의 모든 클래스를 지칭하고, 좁은 의미로 버튼, 텍스트뷰, 체크박스 등 눈에 보이는 요소를 지칭한다. 그리고 위젯을 담는 틀을 레이아웃이라고 한다.

2. 이 장에서 사용한 위젯의 View 클래스 계층도
                Object
                   |
                 View
    ViewGroup   TextView            imageView
        |           |    \               |
 LinearLayout   EditText   Button      imageButton
        |                    |
  RadioGroup            CompoundButton
                             |
                ToggleButton   Switch   RadioButton    CheckBox

3. View 클래스의 주요한 XML 속성으로는 id, layout_width, layout_height, background, padding, layout_margin, visibility, enable, clickable, rotation 등이 있다.

4. 텍스트뷰의 주요한 XML 속성으로는 text, textColor, textSIze, typeface, textStyle, singleLine 등이 있다.

5. XML 속성은 코틀린 코드로 설정할 수 있다. 예를 들어 background 속성은 setBackgroundColor() 메소드에서 설정할 수 있다.

6. 버튼은 Object -> View -> TextView -> Button의 상속 관계를 갖는다. 그러므로 View와 TextView의 XML 속성 및 메소드를 대부분 동일하게 사용할 수 있다.

7. 버튼의 코틀린 코드 세 단계
1) 버튼 변수 선언
    var mybutton : Button
2) 변수에 버튼 위젯 대입
    mybutton = findViewById<Button>(R.id.button1)
3) 버튼을 클릭할 때 동작하는 람다식 정의
    mybutton.setOnClickListener{
        //동작 내용을 이 부분에 코딩
    }

8. 에디트텍스트의 입력값을 가져오는 코드
var myStr : String = myEdit.getText().toString()

9. 이미지뷰와 이미지버튼의 XML 속성으로는 이미지의 경로를 나타내는 src, 이미지 크기를 지정하는 maxHeight/maxWidth, 이미지의 확대/축소 방식을 지정하는 scaleType 등이 있다.

10. 컴파운드버튼(CompoundButton)의 하위 클래스는 체크박스(CheckBox), 라디오버튼(RadioButton), 스위치(Switch), 토글버튼(ToggleButton)이다.

11. 체크박스의 코틀린 코드 세 단계
1) 체크박스 변수 선언
    var mycheck : CheckBox
2) 변수에 체크박스 위젯 대입
    mycheck = findViewById<CheckBox>(R.id.android)
3) 체크박스가 변경될 때 동작하는 람다식 정의
    mycheck.setOnCheckedChangeListener { compoundButton, b ->
        //동작 내용 작성
    }

12. 라디오버튼은 보통 라디오그룹 안에 여러 개를 포함하여 사용한다.

13. 이미지를 사용하려면 그림 파일을 [res]-[drawable] 폴더에 미리 복사해놓아야 한다.


Chap 05
1. 5개 레이아웃의 계층도
java.lang.Object
  ㄴ android.view.View
    ㄴ android.widget.ViewGroup
     ㄴ android.widget.LinearLayout
       ㄴ android.widget.TableLayout
     ㄴ android.widget.RelativeLayout
     ㄴ android.widget.FrameLayout
     ㄴ android.widget.GridLayout

2. 리니어레이아웃의 주요 속성
- orientation: 레이아웃 안에 배치할 위젯의 수직 또는 수평 방향 설정
- gravity: 레이아웃 안에 배치할 위제의 정렬 방향을 좌측, 우측, 중앙 등으로 설정
- padding: 레이아웃 안에 배치할 위젯의 여백 설정
- layout_weight: 레이아웃이 전체 화면에서 차지하는 공간의 가중값을 설정
- baselineAligned: 레이아웃 안에 배치할 위젯을 보기 좋게 정렬한다.

3. 5개 레이아웃의 종류와 형태
얘들아 이건 그냥 사진으로 줄게

4. 렐러티브레이아웃 안의 위젯 속성 중에서 부모(레이아웃)의 어느 위치에 배치할지를 결정하는 속성에는 layout_alignParentBottom을 비롯해 7가지가 있다. 또한 다른 위젯의 특정한 곳에 배치하는 속성에는 layout_above를 비롯해 9가지가 있다.

5. 테이블레이아웃은 위젯을 표 형태로 배치할 때 주로 사용하며 행의 수는 <TableRow>로 결정된다. 테이블레이아웃에서 설정하는 속성에는 layout_span, layout_column, stretchColumns가 있고, 테이블레이아웃 안의 위젯에 설정하는 속성은 layout_span, layout_column이다.

6. 그리드레이아웃은 테이블레이아웃보다 좀 더 직관적으로 구성할 수 있으며, 행 단위의 확장도 가능하여 다양한 형태의 표를 만들 수 있다.

7. 프레임레이아웃은 레이아웃 안의 위젯을 왼쪽 상단부터 겹쳐서 출력해준다.

@+string은 xml 파일에서만 쓸 수 있다.