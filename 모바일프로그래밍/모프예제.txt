Chap 02 

MainActivity.kt
package com.cookandroid.baseapp     //패키지 이름

import android.os.Bundle    //alt+enter로 자동완성
import android.view.View
import android.widget.Button
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity

class MainActivity : AppCompatActivity() {  //AppCompatActivity 클래스의 상속을 받음
    lateinit var button1 : Button
    override fun onCreate(savedInstanceState: Bundle?) {    //onCreate는 자바의 main()과 같은 의미
        super.onCreate(savedInstanceState)      //AppCompatActivity의 onCreate 호출
        setContentVie(R.layout.activity_main)   //setContentVie: 화면에 레이아웃 표시, R. ~ : activity_main 파일 의미
        button1 = findViewById<Button>(R.id.button1)    //findViewById로 activity_main.xml의 버튼 위젯에 접근

        button1.setOnClickListener {    //버튼 클릭 시 작동하는 기능을 람다식으로 정의
            Toast.makeText(applicationContext, "버튼을 눌렀어요", Toast.LENGTH_SHORT).show()
            //5장에 나옵니다
        }
    }
}


Chap 03
1. 변수
fun main() {
    var var1 : Int = 10
    var var2 : Float = 10.1f
    var var3 : Double = 10.2
    var var4 : Char = 'a'
    var var5 : String = 'android'
}

2. if문과 when문
fun main() {
    var count : Int = 85
    if (count >= 90) {
        println("if문: 합격 (장학생)")
    } else if (count >= 60) {
        println("if문: 합격")
    } else {
        println("if문: 불합격")
    }

    var jumsu : Int = (count / 10) * 10
    when (jumsu) {
        in 90 .. 100 -> println("when문: 합격(장학생)")
        in 60 .. 89 -> println("when문: 합격")
        else -> println("when문: 불합격")
    }
}


3. 배열
fun main() {
    var one : IntArray = intArrayOf(10, 20, 30)  //배열 one에 10, 20, 30을 넣는다
    for(i in one.indices) { //indices: 배열의 인덱스를 차례로 반환
        println(one[i])
    }
    for(value in one) { //위에 for문이랑 똑같은 뜻임
        println(value)
    }

    // <String>: 제네릭스. 배열 안에 문자열만 넣을 수 있다는 뜻 -> Int, Double 및 사용자가 정의한 클랙스형에도 사용 가능
    var two : Array<String> = arrayOf("하나", "둘", "셋") //배열 two에 하나, 둘, 셋을 넣는다
    for (i in 0..2 step 1) { //인덱스 하나씩 반환한다는 뜻임 for(int i=0; i<3; i++)이랑 의미 같음
        println(two[i])
    }
    var k : Int = 0
    while (k < two.size) { //이해했다고 믿을게
        println(two[k])
        k++
    }
}


4. 메소드, 전역변수, 지역변수
var myVar : Int = 100
fun main() {
    var myVar : Int = 0
    println (myVar) // 지역변수 출력

    var sum : Int = addFunction(10, 20)
    println(sum)
}

fun addFunction(num1: Int, num2: Int) : Int {
    var hap : Int
    hap = num1 + num2 + myVar // 전역변수 출력
    return hap
}
결과
0
130


5. 예외 처리 try~catch
fun main() {
    var num1 : Int = 100
    var num2 : Int = 0

    try {
        println(num1/num2)
    } catch (E: ArithmeticException) {
        println("계산에 문제가 있습니다.")  //이거 출력
    }
}


6. Car.kt-기본 구조
open class Car {    // 상속 허용 위해 open 사용
    var color : String = ""
    var speed : Int = 0

    companion object {
        var carCount : Int = 0  //정적 필드
        const val MAXSPEED : Int = 200 //상수 필드(변경 불가)
        const val MINSPEED : Int = 0
        fun currentCarCount() : Int { //정적 메소드
            return carCount
        }
    }

    constructor(color: String, speed: Int) { //생성자 생성 ㅋㅋ
        this.color = color //윗줄에서 파라미터로 받은 지역변수 color를 클래스 전역변수 color에 대입하기 위해 this.color 사용
        this.speed = speed
        carCount++
    }

    constructor(speed: Int) { // 메소드 오버로딩 (이름은 같지만 파라미터가 다르다)
        this.speed = speed
    }

    constructor() {

    }

    open fun upSpeed(value: Int) { //이거 알지?? 모르겟으면 물어보기
        if(speed+value >= 200)
            speed = 200
        else
            speed = speed + value
    }

    fun downSpeed(value: Int) {
        if(speed-value <= 0)
            speed = 0
        else
            speed = speed - value
    }
}

fun main() {
    var myCar1 : Car = Car('빨강', 0)
    var myCar2 : Car = Car('파랑', 0)
    var myCar3 : Car = Car('초록', 0)

    myCar1.upSpeed(50)
    println("자동차1의 색상은 "+ myCar1.color + "이며, 속도는 "+ myCar1.speed + "km입니다.)

    2, 3은 생략할게

    println("생산된 차의 대수(정적 필드) ==> " + Car.carCount)
    println("생산된 차의 대수(정적 메소드) ==> " + Car.currentCarCount())
    println("차의 최고 제한 속도 ==> " + Car.MAXSPEED)

    var auto : Automobile = Automobile()
    auto.upSpeed(250)
    println("승용차의 속도는 " + auto.speed + "km입니다.")
}

7. Automobile.kt  클래스 상속
class Automobile : Car { // Car 클래스 상속 받음
    var seatNum : Int = 0

    constructor() {
    }

    fun countSeatNum() : Int {
        return seatNum
    }

    override fun upSpeed(value: Int) {
        if(speed+value >= 300) 
            speed = 300
        else
            speed = speed + value
    }
}


8. Animal.kt    추상 클래스와 추상 메소드, 인터페이스와 다중 상속

abstract class Animal { // 추상 클래스로 클래스 Animal 선언
    var name : String = ""
    abstract fun move() // 추상 메소드로 move() 선언
}

interface iAnimal { //인터페이스 iAnimal 생성. 안에는 추상 메소드만 선언 가능
    abstract fun eat()
}

class iCat : iAnimal {
    override fun eat() {
        println("생선을 좋아한다.")
    }
}

class iTiger : Animal(), iAnimal {
    var age : Int = 0
    override fun move() {
        println("네 발로 이동한다.")
    }
    override fun eat() {
        println("멧돼지를 잡아먹는다.")
    }
}

class Eagle : Animal() {
    var home : String = ""
    override fun move() {
        println("날개로 날아간다.")
    }
}

fun main() {
    var tiger1 = Tiger()
    var eagle1 = Eagle()

    tiger1.move()
    eagle1.move()

    // 클래스 변수의 
    var animal : Animal

    animal = Tiger()
    animal.move()

    animal = Eagle()
    animal.move()
    //다형성

    var cat = iCat()
    cat.eat()

    var tiger = iTiger()
    tiger.move()
    tiger.eat()

}


9. 람다식
//일반적인 메소드
fun addNumber (n1: Int, n2: Int) : Int {
    return n1 + n2
}

//람다식으로 표현
val addNumber = { n1: Int, n2: Int -> n1 + n2 }


10. 추가 문법
1) 문자열 비교
if (str.equals("안녕하세요")) {
    // 문자열이 같으면 이곳 수행
}

2) 날짜 형식
날짜를 표현할 때 DateFormat 클래스를 사용할 수도 있지만, 이를 상속바은 SimpleDateFormat을 사용하면 '연월일'이나 '시분초'와 같은 일반적인 표현이 가능하다.



Chap 04
1. id 속성의 xml 코드
<LinearLayout
    android:orientation="vertical"> //세로 정렬. 수평 방향 정렬은 horizontal
    <TextView
        android:id="@+/textView1"   //클릭 및 터치할 일x -> 삭제해도 ok
        android:layout_width="wrap_content" // 글자가 들어갈 정도로만 자신의 너비 설정
        //match_parent: 자신의 부모나 레이아웃(이 코드는 레이아웃)에 맞춰 높이 설정
        android:layout_height="wrap_content"
        android:text="성별 선택" />

    <RadioButton
        android:id="@+/female"  // 클릭 및 터치 시 코틀린 코드에서 동작이 일어나야 하므로 삭제x
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="여성" />

    <RadioButton
        android:id="@+/male"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="남성" />

    //width, height 크기 설정 단위 -> 주로 dp 사용(Density-independent Pixel)
    //dp: 화면 밀도에 독립적으로 사용되는 단위. 사용 시 실행되는 기기 해상도에 따라 비율은 맞춰 출력됨 -> 항상 같은 크기 유지
</LinearLayout>


2. background 속성의 xml 코드
<LinearLayout
    android:background="#ff0000" // 빨강
    ~생략~/>
    <Button
        android:backgroud="#00ff00" // 초록
        ~생략~/>
</LinearLayout>
*빨간 바탕에 초록 버튼 생성

2-1. LinearLayout에서는 orientation으로 vertical 사용함 -> 세로로 정렬 느낌?


3. hint, paddint, layout_margin은 설명 생략합니다

4. visibility 속성 -> 위제을 보이게 할 것인가
그냥버튼
1 <Button android:visibility="invisible"/>    // 안 보여욧 그치만 내 자리는 있지(투명인간)
2 <Button android:visibility="gone"/>     //안 보여욧 내 자리도 없어욧
3 <Button android:visibility="visible"/>    //보여욧
그냥버튼

실행하면
그.버

3
ㄱㅂ   이런느낌


5. enabled(동작 여부), clickable(클릭 및 터치 가능 여부) 속성
<Button android:enabled="false"/>   //동작이 안 돼욧 버튼 색 반투명...
<Button android:clickable="false"/> //멀쩡한 버튼인데 클릭이 안 돼욧

6. rotation 속성 -> 위젯 회전
<Button android:rotation="45"/> //버튼이 45도로 되어있음 \ 이런느낌

7. 텍스트뷰
text: 문자열 "직접입력" or "@string/strings.xml파일에서 지정"
textColor: 색상 지정
testSize: 문자열 크기 지정. 단위 dp, px, in, mm, sp
typeface: 글꼴 지정. 디폴트 normal. 값으로 sans, serif, monospace
textSytle: 글자 스타일 지정. 디폴트 normal. 값으로 bold, italic, bald|italic
singleLine: 글 길어서 줄 넘어가면 강제로 한 줄 출력. 문자열 뒤에 ...붙여서 표시. 디폴트 false

8. 코틀린 코드로 xml 속성 설정
activity_main.xml
<TextView
    android:text="TextView 1"
    android:id="@+id/textView1" />
<TextView
    android:text="TextView 2"
    android:id="@+id/textView2" />
<TextView
    android:text="TextView 3"
    android:id="@+id/textView3" />

코틀린 코드
override fun onCreate(savedInstanceState: Bundle?) {
    super.onCreate(savedInstanceState)
    setContentView(R.layout_main)   //layout_main 코드를 화면에 출력함

    var tv1 : TextView  //TextView 빨간 줄 뜨면 alt+enter
    var tv2 : TextView
    var tv3 : TextView

    tv1 = findViewById<TextView>(R.id.TextView1)
    tv2 = findViewById<TextView>(R.id.TextView2)
    tv3 = findViewById<TextView>(R.id.TextView3)

    tv1.setText("안녕하세요")
    tv1.setTextColor(Color.RED)
    tv2.setTextSize(30.0f)
    tv2.setTypeface(android.graphics.Typeface.SERIF,    
                    android.graphics.Typeface.BOLD_ITALIC)
    //serif: android.graphics , BOLD_ITALIC: Typeface
    tv3.setText("대충겁나긴코드")
    tv3.setSingleLine()

}

9. 계산기 코드 - 과제 봅시다

10. 체크박스의 xml 코드
<CheckBox
    android:cheecked="true" />
코틀린 코드가
setChecked(): 강제로 체크 켰껐
toggle(): 체크 상태 반대로 변경
isChecked(): 체크 됐는지 확인
setOnCheckedChangeListener: 체크 or 언체크 이벤트 발생 시 사용하는 람다식

11. 스위치와 토글버튼
<Switch 
    android:checked="true"/>    // 주로 온 오프 상태 표시에 사용
<Switch
    android:checked="false"/>
<ToggleButton
    android:checked="true"/>
<ToggleButton
    android:checked="false"/>

12. 라디오 버튼
<RadioGroup
    ...>
    <RadioButton    // id 꼭 있어야함
        ... />
</RadioGroup>


13. 이미지뷰와 이미지버튼의 xml 코드
<ImageView
    android:src="@drawable/q10.png" />
<ImageButton    // 클릭 가능
    android:scaleType="fitXY"   // 이미지를 확대 축소하는 방식. 이미지뷰의 좌우에 맞춰서 확대한다는 뜻   
    ... />
fitCenter: 중앙에 맞춰서 확대함


Chap 05
1. gravity -> 레이아웃 안에 위젯을 어디에 배치할 것인가?
left, right, center, top, bottom
<LinearLayout
    android:orientation="vertical"
    android:gravity="right|bottom"> // 오른쪽 아래 정렬
    ...
</LinearLayout>

2. baselineAligned: 크기가 다른 위젯들을 보기 좋게 정렬. true(디폴트)로 하면 편안해짐

3. 중복 리니어레이아웃의 형태
<리니어
    vertical
    <리니어
        match_parent
        match_parent
        vertical
        버튼 1,2>
    <리니어
        match_parent
        match_parent
        horiaontal
        weight="1" //1로 하면 화면을 꽉 채웁니다
        버튼 3,4>
>
 1
 2
3 4

4. 토스트 메시지
var btn = Button(this)  //변수 생성
btn.text = "버튼"   //버튼 글자 설정
baseLayout.addView(btn) //준비된 버튼을 레이아웃에 출력. 현재는 디폴트 상태이므로 width - match_parent, height - wrap_content

btn.setOnClickListener {
    Toast.makeText(applicationContext, "코드로 생성한 버튼입니다", Toast.LENGTH_SHORT).show()
    //메시지를 잠깐 나타내주는 메소드. 메시지가 출력될 컨텍스트, 메시지 내용, 출력 시간
    //applicationContext: 현재 안드로이드 앱 그 자체
}

5. 렐러티브레이아웃: 레이아웃 내부에 포함된 위젯을 상대적인 위치로 배치. 이 안에 포함된 위젯은 렐러티브레이아웃 어디쯤에 위치시킬 것인지 지정해야함
1) 상하좌우에 배치
사진

2) 다른 위젯의 상대 위치에 배치
사진


6. 테이블레이아웃
<TableLayout
    match_parent
    match_parent>

    <TableRow>
        <버튼
            text 1>
        <버튼
            text 2
            layout_span="2">
        <버튼
            text 3>
    </TableRow>

    <TableRow>
        <버튼
            layout_column="1"
            text 4>
        <버튼
            text 5>
        <버튼
            text 6>
    </TableRow>
</TableLayout>
1  |  2  | 3
    4   5  6


7. 그리드레이아웃
<GridLayout xmlns:android="http://"
    android:columncount ="4"
    android:rowCount="2">
    <Button
        android:layout_column="0"
        android:layout low="0"
        android:layout_rowSpan="2"
        android:layout_ gravity="fi1l_ vertical"
        android:text="1"/>
    <Button
        android:layout_column="1"
        android:layout-row ="0"
        android:layout_columnSpan="2"
        android:layout gravity="fill horizontal"
        android:text="2" />
    <Button
        android:layout_column="3"
        android:layout_row="0"
        android:text="3" />
    <Button
        android:layout_column="1"
        android:layout_row="1"
        android:text="4" />
        생략
</GridLayout>
- |    2    | 3
1 |  4   5  | 6
